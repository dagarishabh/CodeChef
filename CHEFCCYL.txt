#include <bits/stdc++.h>
using namespace std;
int main() {
    int t;
    cin>>t;
    while(t--)
    {
        long long int n,q,i,j,k=0,ver,d;
        cin>>n>>q;
        vector<vector<long long int> > a(n),b(n),c(n);
        long long int vertices1[n][2], vertices[n][2],cycle[n][2],dist[n+1];
        long long int intercycle[n+1];
        for(i=0;i<n+1;i++)
        intercycle[i]=dist[i]=0;
        for(i=0;i<n;i++)
        {
        	cin>>ver;
        	for(j=0;j<ver;j++)
        	{
        		cin>>k;
        		a[i].push_back(k);
        	}
        }
        for(i=0;i<n;i++)
       	{
        	cin>>cycle[i][0]>>cycle[i][1]>>dist[i];
        	cycle[i][0]--;cycle[i][1]--;
        //	cout<<cycle[i][0]<<" "<<cycle[i][1]<<endl;
        }
        for(i=0;i<n;i++)
        {
        	vertices[i][0]=cycle[i][0];
        	vertices1[i][0]=cycle[i][0];
        }
        for(i=0;i<n;i++)
        {
        	vertices[(i+1)%n][1]=cycle[i][1];
        	vertices1[(i+1)%n][1]=cycle[i][1];
        }
           for(i=0;i<n;i++)
        {
        	if(vertices[i][0]>vertices[i][1])
        	swap(vertices[i][0],vertices[i][1]);
        	b[i].push_back(0);
        	for(j=0;j<a[i].size();j++)
        	{
        		b[i].push_back(a[i][j]);
        		b[i][j+1]+=b[i][j];
        	}
        }
    
        for(i=0;i<n;i++)
        {
        	intercycle[i]=min(abs(b[i][vertices[i][0]]-b[i][vertices[i][1]]),b[i][b[i].size()-1]-abs(b[i][vertices[i][0]]-b[i][vertices[i][1]]));
        }
        for(i=1;i<n+1;i++)
        {
        	intercycle[i]+=intercycle[i-1];
        }
        //for(i=0;i<n+1;i++)
        //cout<<intercycle[i]<<" ";
        //cout<<endl;
        for(i=1;i<n+1;i++)
        {
        	dist[i]+=dist[i-1];
        }
     /*   for(i=0;i<n;i++)
        {
        	for(j=0;j<b[i].size();j++)
        	cout<<b[i][j]<<" ";
        	cout<<endl;
        }*/
        while(q--)
        {
        	int v1,v2,c1,c2;
        	long long int ans4=0,ans3=0,ans=0,ans1=0,ans2=0;
        	cin>>v1>>c1>>v2>>c2;
        	v1--;c1--;c2--;v2--;
        	if(c1>c2)
        	{
        		swap(c1,c2);
        		swap(v1,v2);
        	}
        	

        	if(c1>0)
			ans1=dist[c2-1]-dist[c1-1];
			else
			ans1=dist[c2-1];
        	
        	ans2=dist[n]-ans1;
        	//cout<<"distance between cycles clockwise="<<ans1<<endl;
        	//cout<<"distance between cycles anticlockwise="<<ans2<<endl;
        	ans3=(intercycle[c2-1]-intercycle[c1]);
        	if(c1>0)
        	ans4=(intercycle[n]-intercycle[c2]+intercycle[c1-1]);
        	else
        	ans4=(intercycle[n]-intercycle[c2]);
        	  //      	cout<<"intercycle distance clockwise="<<ans3<<endl;
        	//cout<<"intercycle distance anticlockwise="<<ans4<<endl;
        	ans1+=ans3;ans2+=ans4;
        	ans1+=(min(abs(b[c1][v1]-b[c1][vertices1[c1][0]]),b[c1][b[c1].size()-1]-abs(b[c1][v1]-b[c1][vertices1[c1][0]])));
        	ans2+=(min(abs(b[c1][v1]-b[c1][vertices1[c1][1]]),b[c1][b[c1].size()-1]-abs(b[c1][v1]-b[c1][vertices1[c1][1]])));
        	ans1+=(min(abs(b[c2][v2]-b[c2][vertices1[c2][1]]),b[c2][b[c2].size()-1]-abs(b[c2][v2]-b[c2][vertices1[c2][1]])));
        	ans2+=(min(abs(b[c2][v2]-b[c2][vertices1[c2][0]]),b[c2][b[c2].size()-1]-abs(b[c2][v2]-b[c2][vertices1[c2][0]])));
        	cout<<min(ans1,ans2)<<endl;
        	//cout<<b[c1][v1]<<" "<<b[c1][vertices[c1][1]]<<" ,"<<b[c1][b[c1].size()-1]<<endl;
        	//cout<<b[c1][b[c1].size()-1]<<endl;
        	//cout<<cycle[c1][0]<<cycle[c1][1]<<endl;
        	//cout<<(abs(b[c1][v1]-b[c1][cycle[c1][1]]))<<" "<<b[c1][b[c1].size()-1]-abs(b[c1][v1]-b[c1][cycle[c1][1]]);
        }
    }
    
	return 0;
}