#include <bits/stdc++.h>
using namespace std;
long long int a[200001],b[200001];
int n,level=0;
// This class represents a directed graph using adjacency list representation
class Graph
{
    int V;    // No. of vertices
    list<int> *adj;    // Pointer to an array containing adjacency lists
public:
    Graph(int V);  // Constructor
    void addEdge(int v, int w); // function to add an edge to graph
    void BFS(int s,int parent[],int lev[]);  // prints BFS traversal from a given source s
};
 
Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}
 
void Graph::addEdge(int v, int w)
{
    adj[v].push_back(w); // Add w to vâ€™s list.
}
 
void Graph::BFS(int s,int parent[],int lev[])
{
    // Mark all the vertices as not visited
    bool *visited = new bool[V];
    for(int i = 0; i < V; i++)
        visited[i] = false;
    
    // Create a queue for BFS
    list<int> queue;
 
    // Mark the current node as visited and enqueue it
    visited[s] = true;
    queue.push_back(s);
 
    // 'i' will be used to get all adjacent vertices of a vertex
    list<int>::iterator i;
 
    while(!queue.empty())
    {
        // Dequeue a vertex from queue and print it
        s = queue.front();
        //cout << s << " ";
        queue.pop_front();
 
        // Get all adjacent vertices of the dequeued vertex s
        // If a adjacent has not been visited, then mark it visited
        // and enqueue it
        for(i = adj[s].begin(); i != adj[s].end(); ++i)
        {
            if(!visited[*i])
            {
                visited[*i] = true;
                queue.push_back(*i);
                parent[*i]=s;
                lev[*i]=lev[s]+1;
                level=max(level,lev[*i]);
            }
        }
    }
}
 
// Driver program to test methods of graph class

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int i,j,k,q;
    cin>>n>>q;

    Graph g(n);
    for(i=0;i<n-1;i++)
    {
        cin>>k>>j;
        g.addEdge(k,j);
        g.addEdge(j,k);
    }
    int parent[n],lev[n];
    for(i=0;i<n;i++)
    parent[i]=-1,lev[i]=0;
    for(i=0;i<n;i++)
    cin>>a[i];
    g.BFS(0,parent,lev);
    
    /*for(i=0;i<n;i++)
    cout<<parent[i]<<" ";
    cout<<endl;*/
    /*for(i=0;i<n;i++)
    cout<<a[i]<<" ";
    cout<<endl;*/
    k=1;
    b[0]=a[0];
    int level1=level;
    while(1)
    {
        level1=level;
        int visit[n]={0};
        while(level1)
        {
            for(i=n-1;i>=0;i--)
            {
                if(lev[i]==level1&&visit[i]==0)
                {
                    j=i;
                    long long int ans=0,ans1;
                    ans1=a[j];
                    while(j!=-1)
                    {
                       // cout<<j<<endl;
                        if(visit[j]!=1)
                        {
                            visit[j]=1;
                        
                            a[j]^=ans;
                            
                            ans=a[j];
                            ans1=ans;
                        }
                        else
                        a[j]^=ans1;
                        j=parent[j];
                        
                        
                    }
                /*    for(j=0;j<n;j++)
        cout<<a[j]<<" ";
        cout<<endl;*/
                }
            }
            level1--;
        }
       /* for(j=0;j<n;j++)
        cout<<a[j]<<" ";
        cout<<endl;
        //cout<<k<<endl;*/
        b[k++]=a[0];
        if(b[k-1]==b[0]&&k!=1)
        //if(k==n)
        break;
        //break;
    }
    
   /* for(i=0;i<k;i++)
    cout<<b[i]<<" ";
    cout<<endl;*/
    long long int r;
    while(q--)
    {
        cin>>r;
    
        i=r%(k-1);
        cout<<b[i]<<endl;
    }
    return 0;
}
